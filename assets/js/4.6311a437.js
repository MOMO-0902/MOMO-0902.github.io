(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{89:function(e,o,s){"use strict";s.r(o);var t=s(0),a=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,o=e.$createElement,s=e._self._c||o;return s("div",{staticClass:"content"},[s("h2",{attrs:{id:"session"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#session","aria-hidden":"true"}},[e._v("#")]),e._v(" session")]),s("p",[e._v("session是在服务端保存数据的一个结构，用来跟踪用户状态。这个数据可以保存在集群、数据库、文件中。\n由于http是无状态的协议，所以当服务端需要记录用户状态的时候，就需要某种机制来识别具体的用户，这个机制就是session.\n服务端为特定的用户创建特定的session,用于识别并跟踪这个用户。(比如用户向购物车里添加几件物品，就需要session来记录用户状态。)")]),s("h2",{attrs:{id:"cookie"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cookie","aria-hidden":"true"}},[e._v("#")]),e._v(" cookie")]),s("p",[e._v("cookie是保存用户信息的一种机制，用来记录用户的一些信息，也是实现session的一种方式。\ncookie是服务端如何识别特定用户的，每次http请求的时候，客户端都会发送相应的cookie到服务端，大多数应用都是用cookie来实实现session跟踪的，第一次创建session的时候，服务器会在http协议中告诉客户端，需要在cookie里记录一个session ID,以后每次请求都会把这个会话ID带到服务端。")]),s("p",[e._v('cookie中包括名称、值、过期时间、域、路径、安全标志这几个部分。\n例：\nSet-Cookie: name = "Liu";expires: Mon,29-03-2017 00:00:00\nGTM;domain="baidu.com";path=/;secrue')]),s("p",[e._v("如果客户端禁用了浏览器，一般会使用URL重写技术来进行会话跟踪，即每次http交互，url后都会加一个uid=xxxx的参数。")]),s("h2",{attrs:{id:"storage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#storage","aria-hidden":"true"}},[e._v("#")]),e._v(" storage")]),s("p",[e._v("web storage是在客户端存储数据，storage是为了解决cookie的限制。当数据严格控制在客户端时，可以不用通过http来持续将数据发送给服务器")]),s("p",[e._v("Storage作为Web Storage API 的接口，提供了访问特定域名下的会话存储(session storage)或本地存储(local storage)的功能，可以添加、修改、删除存储的数据项")]),s("h4",{attrs:{id:"storage-相关方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#storage-相关方法","aria-hidden":"true"}},[e._v("#")]),e._v(" storage 相关方法")]),s("ul",[s("li",[s("p",[e._v("storage.clear() 清空存储对象里所有键值")])]),s("li",[s("p",[e._v("storage.getItem(keyName) 获取对应键名的键值")])]),s("li",[s("p",[e._v("storage.setItem(keyName, keyValue) 设置对应键名的键值")])]),s("li",[s("p",[e._v("storage.removeItem() 清空对应键名的键值")])]),s("li",[s("p",[e._v("storage.key(n) 获取存储对象中第N个数据项键名")])])]),s("p",[e._v("// 定义设置、获取以及清空本地存储数据项的对象方法")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const storage = {\n  // storage.get为方法名，key为方法接收的参数\n  get: key => {\n    // 以js对象形式返回想要获取的数据项的值\n    // JSON.parse() 用于将一个JSON字符串 转换为js对象\n    return JSON.parse(localStorage.getItem(key)) || null\n  },\n  set: (key,val) => {\n    // 以JSON字符串形式存储数据项\n    // JSON.stringify() 用于将js值转换为JSON字符串\n    return localStorage.setItem(key, JSON.stringify(val))\n  },\n  remove: key => {\n    localStorage.removeItem(key)\n  },\n  clear: () => {\n    localStorage.clear()\n  }\n}\n\nexport default storage\n")])]),s("p",[e._v("// 调用storage方法")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("import storage from 'storage'\n// 页面加载后先判断缓存里有没有所需数据，如果有就直接使用缓存数据项，如果没有再请求接口数据\nif (storage.get('proctInfo')) {\n  this.rate = proctInfo.rate\n} else {\n  queryProduct().then((res) => {\n    storage.set('proctInfo', res)\n  }).catch((err) => {\n    alert(err)\n  })\n}\n\n")])]),s("h2",{attrs:{id:"sessionstorage、localstorage和cookie之间的相同点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sessionstorage、localstorage和cookie之间的相同点","aria-hidden":"true"}},[e._v("#")]),e._v(" sessionStorage、localStorage和cookie之间的相同点")]),s("p",[e._v("都是保存在浏览器端，且同源的（同源即指相同的url,主机名,端口号，对于普遍依赖于cookie维护授权用户session的现代浏览器来说，这种机制有特殊意义。客户端必须在不同站点提供的内容之间维持一个严格限制，以防丢失数据机密或者完整性。）")]),s("h2",{attrs:{id:"sessionstorage、localstorage和cookie之间的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sessionstorage、localstorage和cookie之间的区别","aria-hidden":"true"}},[e._v("#")]),e._v(" sessionStorage、localStorage和cookie之间的区别")]),s("ul",[s("li",[s("p",[e._v("传递方式不同\ncookie数据始终在同源的http请求中携带（即使不需要），即cookie总在浏览器和服务器间来回传递，sessionStorage和localStorage不会自动把数据发送给服务器，仅在本地保存，不进行传递。")])]),s("li",[s("p",[e._v("存储空间不同\ncookie数据不能超过4k，只适合保存很小的数据。\nsessionStorage和localStorage存储大小比cookie大的多，可以达到5M或更大。")])]),s("li",[s("p",[e._v("数据有效期不同\nsessionStorage仅在浏览器窗口关闭前有效，不可能永久保持\nlocalStorage始终有效，浏览器或窗口关闭也一直保存，因此用作持久数据\ncookie只在过期之前的时间内一直有效，即使窗口或浏览器关闭。")])]),s("li",[s("p",[e._v("作用域不同\nsessionStorage不在不同的浏览器窗口中共享，即使是两只一个页面\nlocalStorage在所有同源窗口中都是共享的\ncookie也是在所有同源窗口中都是共享的。")])]),s("li",[s("p",[e._v("cookie数据还有路径的概念，即可以限制cookie只属于某个路径下。")])])])])}],!1,null,null,null);o.default=a.exports}}]);