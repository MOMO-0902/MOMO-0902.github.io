(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{76:function(e,t,a){"use strict";a.r(t);var r=a(0),s=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"js语言基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js语言基础","aria-hidden":"true"}},[e._v("#")]),e._v(" js语言基础")]),a("h2",{attrs:{id:"js数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js数据类型","aria-hidden":"true"}},[e._v("#")]),e._v(" js数据类型")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" *应对检测使用typeof检测null值返回值是\"object\"的方法\n  function type(o) {\n    return (0 === null) ? 'null' : (typeof o)\n  }\n")])]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("*使用toString检测对象是安全、最准确的,先调用对象原型上的toString函数，再调用函数的apply方法在想要检测的对象上执行\nvar d = new Date()\nvar m = object.prototype.toString()\nalert(m.apply(d))\n\n")])]),a("h2",{attrs:{id:"js方法与函数的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js方法与函数的区别","aria-hidden":"true"}},[e._v("#")]),e._v(" js方法与函数的区别")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('1.函数是"function"类的实例，与"string""object"等引用类型一样，具有自己的属性和方法，函数名是指向函数对象的指针，函数可以作为参数参与到传参和返回值中。call()和apply()是每个函数都包含的自有方法。\n  方法(method)是通过对象调用的js函数，是比较特殊的函数，只是跟对象相关\n2.函数着重定义，方法强调执行。\nobj.fn1(obj.fn2)\n调用obj下的fn1方法，并传递obj中名为fn2的函数，方法的执行一般都有返回值，而函数一般作为某个方法的参数\n')])]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('*parseInt("")内参数如果以0开头，会默认转变八进制，想正常解析要有解析字符串后加一个参数\nparseInt("08",10) => 8,意为把十进制数值08转换为十进制数值为8\nparseInt("11",8) => 9，意为把八进制数值11转换为十进制数值9\n\n')])]),a("h2",{attrs:{id:"js类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js类型","aria-hidden":"true"}},[e._v("#")]),e._v(" js类型")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("- 基本数据类型（值类型）： Undefined Null Boolean Number String 基本类型都是按值访问\n- 复杂类型（引用类型）： 按内存地址访问Object 该类型实例化的对象，是一组数据和功能（函数）的集合，在其基础上可继承更多的类型，比如 Array() Date() Function()类型，而object 与其继承的类型又统称为引用类型\n\n")])]),a("h2",{attrs:{id:"js运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js运算符","aria-hidden":"true"}},[e._v("#")]),e._v(" js运算符")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('*谨慎使用运算符\n- 使用 === 与 !== 而不使用 == 与 !=\n- 不建议使用 ++ 和　--\n- "," 逗号运算符，想正确返回连续的值需要有（）括起来\n')])]),a("h2",{attrs:{id:"使用return检测函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用return检测函数","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用return检测函数")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("测试js，用return返回不执行下边的函数来观察是否有问题。\n")])]),a("h2",{attrs:{id:"promise的post传参"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise的post传参","aria-hidden":"true"}},[e._v("#")]),e._v(" promise的post传参")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("postInfo({ money: this.ransomeMoney })\n        .then((resp)=> {\n          console.log(resp)\n        }).catch((err) => {\n          console.log(err.message)\n        })\n")])]),a("h2",{attrs:{id:"js方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js方法","aria-hidden":"true"}},[e._v("#")]),e._v(" js方法")]),a("h3",{attrs:{id:"split-separator-howmany-方法分隔字符串，第一个参数是以何种方式分割字符串，第二个参数指定返回数组的最大长度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#split-separator-howmany-方法分隔字符串，第一个参数是以何种方式分割字符串，第二个参数指定返回数组的最大长度","aria-hidden":"true"}},[e._v("#")]),e._v(" split(separator,howmany)方法分隔字符串，第一个参数是以何种方式分割字符串，第二个参数指定返回数组的最大长度")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('split(\'\')使用空字符串会分割字符串中每一个字符\n\n例：\nvar str = \'how are you\'\n// 使用空字符串分割\nstr.split(\'\') 结果为 ["h", "o", "w", " ", "a", "r", "e", " ", "y", "o", "u"]\n// 使用空格分割，\nstr.split(\' \'),结果为 ["how", "are", "you"]\n')])]),a("h3",{attrs:{id:"object-keys-遍历一个对象，返回一个由一个给定对象的自身可枚举属性组成的数组。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-keys-遍历一个对象，返回一个由一个给定对象的自身可枚举属性组成的数组。","aria-hidden":"true"}},[e._v("#")]),e._v(" object.keys()遍历一个对象，返回一个由一个给定对象的自身可枚举属性组成的数组。")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/*Array对象*/\nlet arr = ['a', 'b', 'c']\nconsole.log(object.keys(arr))\n// 结果： ['0', '1', '2']\n\n")])]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/*Array对象*/\nlet obj = [foo: 'bar', bar: 42]\nconsole.log(object.keys(obj))\n// 结果： ['foo', 'bar' ]\n\n\n/*类数组对象*/\nlet obj = {0: 'a', 1: 'b', 2: 'c'}\nconsole.log(object.keys(obj))\n// 结果： ['0', '1', '2']\n")])]),a("h3",{attrs:{id:"every-方法用于检测数组所有元素是否都符合指定条件（通过函数提供），结果是一个逻辑值，如果有一个元素不满足，则整个表达式返回false，且剩余的元素不会再进行检测。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#every-方法用于检测数组所有元素是否都符合指定条件（通过函数提供），结果是一个逻辑值，如果有一个元素不满足，则整个表达式返回false，且剩余的元素不会再进行检测。","aria-hidden":"true"}},[e._v("#")]),e._v(" every()方法用于检测数组所有元素是否都符合指定条件（通过函数提供），结果是一个逻辑值，如果有一个元素不满足，则整个表达式返回false，且剩余的元素不会再进行检测。")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var ages = [11,12,13,14]\nfunction checkAdult(age) {\n  return age >= 12\n}\nage.every(checkAdult)\n// false\n")])]),a("h3",{attrs:{id:"some-方法用于检测数组中的元素是否满足指定条件，结果是一个逻辑值，如果有一个元素满足条件，则返回true，剩余元素不会再进行检测。即判断数组中是否有符合条件的元素，只要有一个就返回true，与every相反"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#some-方法用于检测数组中的元素是否满足指定条件，结果是一个逻辑值，如果有一个元素满足条件，则返回true，剩余元素不会再进行检测。即判断数组中是否有符合条件的元素，只要有一个就返回true，与every相反","aria-hidden":"true"}},[e._v("#")]),e._v(" some()方法用于检测数组中的元素是否满足指定条件，结果是一个逻辑值，如果有一个元素满足条件，则返回true，剩余元素不会再进行检测。即判断数组中是否有符合条件的元素，只要有一个就返回true，与every相反")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var ages = [11,12,13,14]\nfunction checkAdult(age) {\n  return age >= 12\n}\nage.every(checkAdult)\n// true\n")])]),a("h3",{attrs:{id:"findindex-返回数组中第一个符合条件的元素的index值，当数组中元素在测试条件返回true时，findindex-会返回符合条件的元素的索引位置，之后的值不会再调用执行函数。没有符合条件的就返回-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#findindex-返回数组中第一个符合条件的元素的index值，当数组中元素在测试条件返回true时，findindex-会返回符合条件的元素的索引位置，之后的值不会再调用执行函数。没有符合条件的就返回-1","aria-hidden":"true"}},[e._v("#")]),e._v(" findIndex()返回数组中第一个符合条件的元素的index值，当数组中元素在测试条件返回true时，findIndex()会返回符合条件的元素的索引位置，之后的值不会再调用执行函数。没有符合条件的就返回-1")]),a("h3",{attrs:{id:"js使用parseint进制转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js使用parseint进制转换","aria-hidden":"true"}},[e._v("#")]),e._v(" js使用parseInt进制转换")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('*parseInt("")内参数如果以0开头，会默认转变八进制，想正常解析要有解析字符串后加一个参数\nparseInt("08",10) => 8,意为把十进制数值08转换为十进制数值为8\nparseInt("11",8) => 9，意为把八进制数值11转换为十进制数值9\n\n')])]),a("h3",{attrs:{id:"使用date-parse判断两个日期大小"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用date-parse判断两个日期大小","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用Date.parse判断两个日期大小")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' if (\n        this.startDate != undefined &&\n        this.endDate != undefined &&\n        Date.parse(this.startDate) - Date.parse(this.endDate) > 0\n      ) {\n        this.$message.error("结束日期不得小于起始日期");\n        if (val === 0) {\n          this.startDate = "";\n        } else {\n          this.endDate = "";\n        }\n      }\n')])]),a("h3",{attrs:{id:"正则表达式验证手机号、电话、邮箱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式验证手机号、电话、邮箱","aria-hidden":"true"}},[e._v("#")]),e._v(" 正则表达式验证手机号、电话、邮箱")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  let mbTest = /^1[3|4|5|7|8][0-9]\\d{4,8}$/;\n  let fixTest = /^0\\d{2,3}-?\\d{7,8}$/;\n  let mailTest = /^(\\w-*\\.*)+@(\\w-?)+(\\.\\w{2,})+$/;\n")])])])}],!1,null,null,null);t.default=s.exports}}]);